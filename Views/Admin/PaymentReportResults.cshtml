@model PaymentReportsViewModel
@{
    ViewData["Title"] = Model.ReportTitle;
}

<div class="container-fluid mt-4">
    <div class="row mb-4">
        <div class="col-md-6">
            <h1 class="h3 mb-0 text-gray-800">@Model.ReportTitle</h1>
            <p class="mb-0">Generated on @DateTime.Now.ToString("MMMM dd, yyyy")</p>
        </div>
        <div class="col-md-6 text-md-end">
            <button type="button" class="btn btn-secondary" onclick="window.print()">
                <i class="bi bi-printer"></i> Print Report
            </button>
            <a asp-action="PaymentReports" class="btn btn-primary">
                <i class="bi bi-arrow-left"></i> Back to Reports
            </a>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="row">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                Total Amount</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.TotalAmount.ToString("C")</div>
                        </div>
                        <div class="col-auto">
                            <i class="bi bi-cash-stack fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                Paid Amount</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.PaidAmount.ToString("C")</div>
                        </div>
                        <div class="col-auto">
                            <i class="bi bi-check-circle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                Pending Amount</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.PendingAmount.ToString("C")</div>
                        </div>
                        <div class="col-auto">
                            <i class="bi bi-hourglass-split fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-danger shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
                                Overdue Amount</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">@Model.OverdueAmount.ToString("C")</div>
                        </div>
                        <div class="col-auto">
                            <i class="bi bi-exclamation-triangle fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Report Data -->
    <div class="card shadow mb-4">
        <div class="card-header py-3 bg-primary">
            <h6 class="m-0 font-weight-bold text-white">Payment Details</h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="reportTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Homeowner</th>
                            <th>Property</th>
                            <th>Amount</th>
                            <th>Type</th>
                            <th>Due Date</th>
                            <th>Payment Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.ReportData != null && Model.ReportData.Any())
                        {
                            foreach (var payment in Model.ReportData)
                            {
                                <tr>
                                    <td>@payment.Id</td>
                                    <td>@payment.User.FirstName @payment.User.LastName</td>
                                    <td>@payment.Property.Address</td>
                                    <td>@payment.Amount.ToString("C")</td>
                                    <td>@payment.Type</td>
                                    <td>@payment.DueDate.ToString("MMM dd, yyyy")</td>
                                    <td>@(payment.PaymentDate.HasValue ? payment.PaymentDate.Value.ToString("MMM dd, yyyy") : "-")</td>
                                    <td>
                                        @switch (payment.Status)
                                        {
                                            case PaymentStatus.Paid:
                                                <span class="badge bg-success">Paid</span>
                                                break;
                                            case PaymentStatus.Pending:
                                                <span class="badge bg-warning">Pending</span>
                                                break;
                                            case PaymentStatus.Overdue:
                                                <span class="badge bg-danger">Overdue</span>
                                                break;
                                            case PaymentStatus.Cancelled:
                                                <span class="badge bg-secondary">Cancelled</span>
                                                break;
                                        }
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center">No data available for this report.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Report Chart -->
    <div class="row">
        <div class="col-xl-6 col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3 bg-primary">
                    <h6 class="m-0 font-weight-bold text-white">Payment Status Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="paymentStatusChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-6 col-lg-6">
            <div class="card shadow mb-4">
                <div class="card-header py-3 bg-primary">
                    <h6 class="m-0 font-weight-bold text-white">Payment Type Distribution</h6>
                </div>
                <div class="card-body">
                    <div class="chart-pie pt-4 pb-2">
                        <canvas id="paymentTypeChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" />
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.2.2/css/buttons.bootstrap5.min.css" />
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/dataTables.buttons.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.bootstrap5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.2.2/js/buttons.html5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <style>
        @@media print {
            .btn, .dataTables_filter, .dataTables_paginate, .dataTables_info, .dataTables_length {
                display: none !important;
            }
            
            .card {
                border: 1px solid #ddd !important;
            }
            
            .card-header {
                background-color: #f8f9fc !important;
                color: #000 !important;
            }
            
            body {
                font-size: 12pt;
            }
            
            .container-fluid {
                width: 100% !important;
                max-width: 100% !important;
            }
        }
    </style>
    
    <script>
        $(document).ready(function() {
            // Initialize DataTable with export options
            $('#reportTable').DataTable({
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf'
                ]
            });
            
            // Extract data for charts
            var statusCounts = {
                'Paid': 0,
                'Pending': 0,
                'Overdue': 0,
                'Cancelled': 0
            };
            
            var typeCounts = {};
            
            @if (Model.ReportData != null && Model.ReportData.Any())
            {
                <text>
                @foreach (var payment in Model.ReportData)
                {
                    <text>
                    statusCounts['@payment.Status']++;
                    
                    if (typeCounts['@payment.Type'] === undefined) {
                        typeCounts['@payment.Type'] = 0;
                    }
                    typeCounts['@payment.Type']++;
                    </text>
                }
                </text>
            }
            
            // Payment Status Chart
            var statusCtx = document.getElementById("paymentStatusChart");
            var paymentStatusChart = new Chart(statusCtx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(statusCounts),
                    datasets: [{
                        data: Object.values(statusCounts),
                        backgroundColor: ['#1cc88a', '#f6c23e', '#e74a3b', '#858796'],
                        hoverBackgroundColor: ['#17a673', '#dda20a', '#be2617', '#6e707e'],
                        hoverBorderColor: "rgba(234, 236, 244, 1)",
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    cutoutPercentage: 70,
                },
            });
            
            // Payment Type Chart
            var typeCtx = document.getElementById("paymentTypeChart");
            var paymentTypeChart = new Chart(typeCtx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(typeCounts),
                    datasets: [{
                        data: Object.values(typeCounts),
                        backgroundColor: ['#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b', '#858796'],
                        hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf', '#dda20a', '#be2617', '#6e707e'],
                        hoverBorderColor: "rgba(234, 236, 244, 1)",
                    }],
                },
                options: {
                    maintainAspectRatio: false,
                    tooltips: {
                        backgroundColor: "rgb(255,255,255)",
                        bodyFontColor: "#858796",
                        borderColor: '#dddfeb',
                        borderWidth: 1,
                        xPadding: 15,
                        yPadding: 15,
                        displayColors: false,
                        caretPadding: 10,
                    },
                    legend: {
                        display: true,
                        position: 'bottom'
                    },
                    cutoutPercentage: 70,
                },
            });
        });
    </script>
} 